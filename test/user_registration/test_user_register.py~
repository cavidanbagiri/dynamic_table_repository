

# tests/test_registration.py
import pytest
from httpx import AsyncClient
from schemas.main_model_schemas import RequestRegisterUserSchema  # Import your schema

@pytest.mark.asyncio
async def test_register_user_success(client, db_session):
    # Test successful registration
    user_data = {
        "name": "John",
        "middle_name": "Doe",
        "surname": "Smith",
        "username": "johndoe",
        "email": "johndoe@example.com",
        "password": "password123",
    }
    response = await client.post("/register", json=user_data)
    assert response.status_code == 201
    assert response.json()["message"] == "User registered successfully"
    assert response.json()["user"]["email"] == "johndoe@example.com"

@pytest.mark.asyncio
async def test_register_duplicate_email(client, db_session):
    # Test duplicate email registration
    user_data = {
        "name": "Jane",
        "middle_name": "Doe",
        "surname": "Smith",
        "username": "janedoe",
        "email": "janedoe@example.com",
        "password": "password123",
    }
    # Register the first user
    await client.post("/register", json=user_data)

    # Try to register the same email again
    response = await client.post("/register", json=user_data)
    assert response.status_code == 400
    assert response.json()["message"] == "Email or username already in use."

@pytest.mark.asyncio
async def test_register_missing_fields(client, db_session):
    # Test registration with missing fields
    user_data = {
        "name": "John",
        "middle_name": "Doe",
        "surname": "Smith",
        # Missing username, email, and password
    }
    response = await client.post("/register", json=user_data)
    assert response.status_code == 422  # Pydantic validation error








# import pytest
# import requests
# from schemas.main_model_schemas import RegisterResponseSchema, ResponseRegisterUserSchema
#
# endpoint: str = "http://localhost:8000/api/user/register"
#
# class TestUserRegister:
#
#     def test_user_register(self):
#         data = {
#             "name": "cavidan",
#             "username": "ramzes6",
#             "email": "cavidanbagiri6@gmail.com",
#             "password": "cavidan1"
#         }
#         response = requests.post(endpoint, json=data)
#
#         # Assertions for status code and message
#         assert response.status_code == 201, f"Expected status code 201, got {response.status_code}"
#         response_data = response.json()
#         assert response_data["message"] == "User registered successfully", "Unexpected success message"
#
#         # Validate the user data against the schema
#         user_data = response_data["user"]
#         try:
#             parsed_user = ResponseRegisterUserSchema(**user_data)
#             # Compare the dictionary representation of the Pydantic model
#             assert user_data == parsed_user.dict(), "User data does not match the schema"
#         except Exception as e:
#             pytest.fail(f"Failed to validate user data: {e}")
